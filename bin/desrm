#!/usr/bin/env python3
# $Id: desrm 46884 2018-04-05 16:25:22Z friedel $
# $Rev:: 46884                            $:  # Revision of last commit.
# $LastChangedBy:: friedel                $:  # Author of last commit.
# $LastChangedDate:: 2018-04-05 11:25:22 #$:  # Date of last commit.

""" Delete processing attempt from condor queue """


import argparse
import sys
import re
import time

import processingfw.pfwdefs as pfwdefs
import processingfw.pfwcondor as pfwcondor
import processingfw.pfwdb as pfwdb

def update_db(dbh, task_id, pfwid):
    """ Tell DB that attempt was deleted """

    # end task for all tasks in attempt that don't already have end
    sql = f"""select id from task where root_task_id={dbh.get_named_bind_string('root_task_id')} and start_time is not NULL and
             end_time is NULL"""
    curs = dbh.cursor()
    curs.execute(sql, {'root_task_id': task_id})
    for (tid, ) in curs:
        dbh.end_task(tid, pfwdefs.PF_EXIT_OPDELETE, False)

    # end attempt task
    dbh.end_task(task_id, pfwdefs.PF_EXIT_OPDELETE, False)

    # set attempt's data state to junk
    dbh.basic_update_row('ATTEMPT_STATE', {'data_state': 'JUNK', 'processing_state': 'FAIL'}, {'pfw_attempt_id': pfwid})


def get_attempt_from_condor_id(givcondorid):
    """ Get attempt string from given condor id """
    masterjob = pfwcondor.condor_q(givcondorid)
    if givcondorid not in masterjob:
        print("Error: attempt is not in current condor queue.   Not deleting attempt.")
        return 1

    attemptkey = pfwdefs.ATTRIB_PREFIX + 'run'
    if attemptkey not in masterjob[givcondorid]:
        print(f"Given argument doesn't look like a desdm job (missing {attemptkey}).")
        print("    Not deleting attempt")
        print(masterjob)
        sys.exit(1)

    attempt = masterjob[givcondorid][attemptkey]
    return attempt


def parse_attempt_str(attempt):
    """ Parse attempt string to get reqnum, unitname, attnum """
    match = re.match(r"(.+)_r(\d+)p(\d+)", attempt)
    if not match:
        print("Error: attempt is not correct format (<unitname>_r<reqnum>p<attnum>).")
        print("  Not deleting attempt")
        sys.exit(1)

    reqnum = match.group(2)
    unitname = match.group(1)
    attnum = str(int(match.group(3)))
    return (reqnum, unitname, attnum)

def get_attempt_info_from_db(dbh, reqnum, unitname, attnum):
    """ Get condor job id and task id from DB for the attempt """

    sql = f"""select condorid, task_id, id from pfw_attempt where reqnum='{reqnum}' and
             unitname='{unitname}' and attnum='{attnum}'"""
    #print sql
    curs = dbh.cursor()
    curs.execute(sql)
    rows = curs.fetchall()
    if len(rows) > 1:
        print("Error:   Found more than 1 row in pfw_attempt for the attempt")
        print(rows)
        sys.exit(1)
    elif not rows:
        print("Error:  Found 0 rows in pfw_attempt for the given attempt")
        sys.exit(1)

    condorid = str(rows[0][0])
    task_id = rows[0][1]
    pfwid = rows[0][2]
    return (condorid, task_id, pfwid)


def main(argv=None):
    """ Entry point """
    parser = argparse.ArgumentParser(description='desrm')
    parser.add_argument('--des_services', action='store', help='')
    parser.add_argument('--section', action='store',
                        help='Must be specified if not set in environment')
    parser.add_argument('attempt', nargs=1, action='store', default=None)
    args = parser.parse_args(argv)


    condorid = None
    givcondorid = None
    #print "attempt = ", args.attempt
    attempt = args.attempt[0]
    if '_' not in attempt:
        match = re.match(r"(\d+)[.\d+]?", attempt)
        if not match:
            print("Given argument doesn't look like a condor id.   Not deleting attempt")
            sys.exit(1)

        givcondorid = match.group(1)
        attempt = get_attempt_from_condor_id(givcondorid)

    (reqnum, unitname, attnum) = parse_attempt_str(attempt)

    dbh = pfwdb.PFWDB(args.des_services, args.section)
    (condorid, attempt_task_id, pfwid) = get_attempt_info_from_db(dbh, reqnum, unitname, attnum)
    if givcondorid is not None and givcondorid != condorid:
        print("Error:  Condor id from DB doesn't match given condor id.  Not deleting attempt")
        print(f"({givcondorid}, {condorid})")
        sys.exit(1)

    #print "Condor id = ", condorid

    if condorid is not None:
        masterjob = pfwcondor.condor_q(str(condorid))
        if not masterjob:
            print("Error: attempt is not in current condor queue.   Not deleting attempt.")
            sys.exit(1)

    print(f"Deleting attempt: reqnum={reqnum}, unitname={unitname}, attnum={attnum}, condorid={condorid}")


    # delete top condor job for attempt
    pfwcondor.condor_rm(condorid)
    time.sleep(10)

    update_db(dbh, attempt_task_id, pfwid)
    dbh.commit()
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
